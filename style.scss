// Este comentario no acabará en el CSS final.acabará
/* Este comentario estará en el código menos en el modo comprimido */
/*! Y este commentario estará siempre */

//Así podemos usar librerías sass, hay muchísimas.
@use "sass:math";

//Los colores pertenecen a una paleta armónica.
$background-color: #211940; //variable
$general-color: #D9B3CA;
$title-color: #9B87BC;
$sizes: 10px, 40px, 60px; //Esto es una lista de elementos y podemos utilizarla en los bucles.
@mixin centrado{ //No es necesario para la primera tarea pero es algo realmente potente de esta herramienta
    margin: 0 auto;
}

//Aumentamos nuestro CSS para añadir y aprender estructuras de control.
@mixin image($size, $avatar: false){
    width: $size;
    height: $size;
    @if $avatar == "true" { //Así realizo una condición. Solo en caso de que el elemento sea un avatar, es cuando le añado un radio.
        border-radius: math.div($size, 2);
    } @else if $avatar == "icon" {
        border: solid 1px white;
    }else{
        border: solid 5px $general-color;
    }
}

body{
    $anchoContainer: 75%; //Las variables también pueden ser locales. Esta variables solo se podrá usar en body y sus anidados, pero no fuera.
    //Si se quisiera usar como variable global, sin necesidad de reestructurar el código, se puede añadir !global al final, y pasaría a ser global.
    //Por ejemplo, en este caso, $anchoContainer: 75% !global;
    background-color: $background-color; //uso de variables
    width: 100%;
    margin: 0;
    .container{ //anidación
        width: $anchoContainer;
        @include centrado; //incrustado del mixin
        color: $general-color;
        h1{
            color: $title-color;
            text-align: center;
        }
        #gato{
            @include image(200px, $avatar: false);
        }
        #perro{
             @include image(200px, $avatar: true);
        }
        .listaIconos{
        display: flex;
        flex-wrap: wrap;
        //Ahora voy a darle estilo a los 3 iconos que quiero mostrar de distintos tamaños. Es muy útil para las querys. Y sí, por supuesto que se puede mezclar todo esto con Media Query.
        @each $size in $sizes {
            .icon-#{$size} {
                font-size: $size;
                img{
                    @include image($size, $avatar: icon);
                }
            }
        }
        }
    }
}


//Por cuestión de claridad veremos otro conjunto de conceptos a continuación.height
//Hemos visto una lista de elementos, pero también existen los Maps con clave y valor, o incluso clave y varios valores. Veremos solo el primer caso, en la documentación de Sass podéis ver el resto.

$descripcion: ("nombre": white, "apellido": red, "edad": orange);

.descriptionContainer{
    display: flex;
    flex-direction: column;
    @each $nombre, $color in $descripcion {
        #texto-#{$nombre}{
            color: $color;
        }
    }

}

//Ahora aprovechemos el bucle for para repasar pseudoselectores. Vamos a dar color alterno a la lista de la compra. También repasaremos las condiciones.
.listaCompra{
    @for $i from 1 through 10 { //Un bucle de 1 a 10.

        li:nth-child(#{$i}){
            @if $i%2 == 0{
                color: white;
            }@else{
                color: red;
            }
        }

    }
}

//Nos queda tan solo ver funciones y while, aunque este último tiene la misma lógica que el bucle for.
@function escalar($valor, $limite, $disminucion: 2){ //Este bucle recibirá un valor y un límite, y dividirá entre la cantidad indicada hasta que sea correcto el valor

    @while $valor > $limite{
        $valor: math.div($valor, $disminucion);
    }
    @return $valor;

}

.textoGiganteEscalado{
    font-size: escalar(600px, 100px, 5);
    color: white;
}